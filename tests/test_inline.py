from unittest import TestCase
from .common_mock import MagicMock

from pytapable import Hook

TAP_NAME = 'my_tap'


class TestInlineHooks(TestCase):

    def test_create_hook(self):
        my_hook1 = Hook()
        my_hook2 = Hook()

        # Test hook's properties
        assert my_hook1.HOOK_TYPE == Hook.INLINE
        assert my_hook1.label == Hook.HOOK_TYPE_LABEL[Hook.INLINE]

        # Test autogenerated names are unique
        assert 'undefined' in my_hook1.name
        assert 'undefined' in my_hook2.name
        assert my_hook1.name != my_hook2.name

    def test_create_hook_with_name(self):
        my_hook = Hook('name')

        assert 'name' in my_hook.name

    def test_install_tap(self):
        my_hook = Hook()

        # Tap into hook
        callback = MagicMock()
        my_hook.tap(TAP_NAME, callback)

        assert len(my_hook.taps) == 1
        assert my_hook.taps[0].name == TAP_NAME
        assert my_hook.taps[0].fn == callback

    def test_trigger_hook(self):
        my_hook = Hook()

        # Tap into hook
        callback = MagicMock()
        my_hook.tap(TAP_NAME, callback)

        # Trigger
        args = ('hello', 'hook')
        kwargs = {'primitive': 'hi', 'complex': {'a': 1}}
        my_hook.call(*args, **kwargs)

        # Assert args in hooks
        context = {
            'hook_type': Hook.HOOK_TYPE,
            'hook_type_label':  my_hook.label,
            'hook_name': my_hook.name,
            'tap_name': TAP_NAME
        }
        callback.assert_called_once_with(context=context, args=args, kwargs=kwargs)
